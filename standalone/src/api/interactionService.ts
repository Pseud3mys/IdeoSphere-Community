import { loadMockDataSet, getUserById, getIdeaById, getPostById } from './dataService';

// Simuler un d√©lai d'API
const simulateApiDelay = (ms: number = 100) => 
  new Promise(resolve => setTimeout(resolve, ms));

/**
 * Service d'interactions utilisateur
 * G√®re les likes, soutiens, et autres interactions
 */

/**
 * Interface pour le r√©sultat du toggle de soutien (unifi√© pour id√©es et posts)
 */
export interface SupportResult {
  success: boolean;
  isSupporting: boolean;
  supportCount: number;
  supporters: any[]; // Pour id√©es: objets User, pour posts: IDs string
}

/**
 * Basculer le soutien d'un contenu (id√©e ou post)
 * @param contentId - ID du contenu (id√©e ou post)
 * @param userId - ID de l'utilisateur
 * @param contentType - Type de contenu ('idea' ou 'post')
 * @param isCurrentlySupporting - Indique si l'utilisateur soutient d√©j√† le contenu (calcul√© dans les hooks)
 * @returns R√©sultat avec les nouvelles valeurs ou null si erreur
 */
export async function toggleSupportOnApi(
  contentId: string,
  userId: string,
  contentType: 'idea' | 'post',
  isCurrentlySupporting: boolean
): Promise<SupportResult | null> {
  await simulateApiDelay(150);
  
  console.log(`üîÑ [API] Toggle soutien ${contentType}:`, contentId, 'par:', userId, 'actuellement:', isCurrentlySupporting);
  
  if (contentType === 'idea') {
    // ID√âE
    const [idea, user] = await Promise.all([
      getIdeaById(contentId),
      getUserById(userId)
    ]);
    
    if (!idea) {
      console.log('‚ùå [API] Id√©e non trouv√©e:', contentId);
      return null;
    }
    
    if (!user) {
      console.log('‚ùå [API] Utilisateur non trouv√©:', userId);
      return null;
    }
    
    let newSupporters: any[];
    let newIsSupporting: boolean;
    
    if (isCurrentlySupporting) {
      newSupporters = (idea.supporters || []).filter(s => s.id !== userId);
      newIsSupporting = false;
      console.log('‚úÖ [API] Soutien retir√© pour id√©e:', idea.title);
    } else {
      newSupporters = [...(idea.supporters || []), user];
      newIsSupporting = true;
      console.log('‚úÖ [API] Soutien ajout√© pour id√©e:', idea.title);
    }
    
    // ‚úÖ Calculer supportCount dynamiquement depuis la longueur du tableau
    const newSupportCount = newSupporters.length;
    
    return {
      success: true,
      isSupporting: newIsSupporting,
      supportCount: newSupportCount,
      supporters: newSupporters
    };
    
  } else {
    // POST
    const [post, user] = await Promise.all([
      getPostById(contentId),
      getUserById(userId)
    ]);
    
    if (!post) {
      console.log('‚ùå [API] Post non trouv√©:', contentId);
      return null;
    }
    
    if (!user) {
      console.log('‚ùå [API] Utilisateur non trouv√©:', userId);
      return null;
    }
    
    let newSupporters: string[];
    let newIsSupporting: boolean;
    
    if (isCurrentlySupporting) {
      newSupporters = (post.supporters || []).filter(id => id !== userId);
      newIsSupporting = false;
      console.log('‚úÖ [API] Soutien retir√© pour post');
    } else {
      newSupporters = [...(post.supporters || []), userId];
      newIsSupporting = true;
      console.log('‚úÖ [API] Soutien ajout√© pour post');
    }
    
    // ‚úÖ Calculer supportCount dynamiquement depuis la longueur du tableau
    const newSupportCount = newSupporters.length;
    
    return {
      success: true,
      isSupporting: newIsSupporting,
      supportCount: newSupportCount,
      supporters: newSupporters
    };
  }
}

/**
 * @deprecated Utilisez toggleSupportOnApi avec contentType: 'idea' et isCurrentlySupporting
 */
export async function toggleIdeaSupportOnApi(
  ideaId: string, 
  userId: string
): Promise<SupportResult | null> {
  // Pour la r√©trocompatibilit√©, calculer isCurrentlySupporting ici
  const idea = await getIdeaById(ideaId);
  const isCurrentlySupporting = idea?.supporters?.some(s => s.id === userId) || false;
  return toggleSupportOnApi(ideaId, userId, 'idea', isCurrentlySupporting);
}

/**
 * @deprecated Utilisez toggleSupportOnApi avec contentType: 'post' et isCurrentlySupporting
 */
export async function togglePostLikeOnApi(
  postId: string, 
  userId: string
): Promise<SupportResult | null> {
  // Pour la r√©trocompatibilit√©, calculer isCurrentlySupporting ici
  const post = await getPostById(postId);
  const isCurrentlySupporting = post?.supporters?.includes(userId) || false;
  return toggleSupportOnApi(postId, userId, 'post', isCurrentlySupporting);
}

/**
 * √âvaluer une id√©e selon un crit√®re
 * @param ideaId - ID de l'id√©e
 * @param userId - ID de l'utilisateur
 * @param criterionId - ID du crit√®re d'√©valuation
 * @param value - Note donn√©e (1-5)
 * @returns true si succ√®s, false sinon
 */
export async function rateIdeaOnApi(
  ideaId: string,
  userId: string,
  criterionId: string,
  value: number
): Promise<boolean> {
  await simulateApiDelay(120);
  
  // Validation de la note
  if (value < 1 || value > 5) {
    console.log('‚ùå [API] Note invalide:', value);
    return false;
  }
  
  // V√©rifier que l'id√©e et l'utilisateur existent
  const [idea, user] = await Promise.all([
    getIdeaById(ideaId),
    getUserById(userId)
  ]);
  
  if (!idea) {
    console.log('‚ùå [API] Id√©e non trouv√©e:', ideaId);
    return false;
  }
  
  if (!user) {
    console.log('‚ùå [API] Utilisateur non trouv√©:', userId);
    return false;
  }
  
  // V√©rifier que le crit√®re existe
  const criterion = idea.ratingCriteria.find(c => c.id === criterionId);
  if (!criterion) {
    console.log('‚ùå [API] Crit√®re non trouv√©:', criterionId);
    return false;
  }
  
  // Dans un vrai syst√®me, on mettrait √† jour la BD ici
  return true;
}

/**
 * Signaler un contenu inappropri√©
 * @param contentType - Type de contenu ('idea' ou 'post')
 * @param contentId - ID du contenu
 * @param userId - ID de l'utilisateur qui signale
 * @param reason - Raison du signalement
 * @returns true si succ√®s, false sinon
 */
export async function reportContentOnApi(
  contentType: 'idea' | 'post',
  contentId: string,
  userId: string,
  reason: string
): Promise<boolean> {
  await simulateApiDelay(200);
  
  console.log('üîÑ [API] Signalement de contenu:', contentType, contentId, 'par:', userId, 'raison:', reason);
  
  // V√©rifier que l'utilisateur existe
  const user = await getUserById(userId);
  if (!user) {
    console.log('‚ùå [API] Utilisateur non trouv√©:', userId);
    return false;
  }
  
  // V√©rifier que le contenu existe
  let contentExists = false;
  if (contentType === 'idea') {
    contentExists = await getIdeaById(contentId) !== null;
  } else if (contentType === 'post') {
    contentExists = await getPostById(contentId) !== null;
  }
  
  if (!contentExists) {
    console.log('‚ùå [API] Contenu non trouv√©:', contentType, contentId);
    return false;
  }
  
  console.log('‚úÖ [API] Signalement enregistr√© et envoy√© √† la mod√©ration');
  // Dans un vrai syst√®me, on enverrait le signalement au syst√®me de mod√©ration
  return true;
}

/**
 * Ignorer un contenu (pour ne plus le voir dans le feed)
 * @param contentType - Type de contenu ('idea' ou 'post')
 * @param contentId - ID du contenu
 * @param userId - ID de l'utilisateur
 * @returns true si succ√®s, false sinon
 */
export async function ignoreContentOnApi(
  contentType: 'idea' | 'post',
  contentId: string,
  userId: string
): Promise<boolean> {
  await simulateApiDelay(100);
  
  console.log('üîÑ [API] Ignorer contenu:', contentType, contentId, 'par:', userId);
  
  // V√©rifier que l'utilisateur existe
  const user = await getUserById(userId);
  if (!user) {
    console.log('‚ùå [API] Utilisateur non trouv√©:', userId);
    return false;
  }
  
  console.log('‚úÖ [API] Contenu ajout√© √† la liste des ignor√©s');
  // Dans un vrai syst√®me, on mettrait √† jour les pr√©f√©rences utilisateur
  return true;
}

/**
 * Partager un contenu (g√©n√©rer lien de partage)
 * @param contentType - Type de contenu ('idea' ou 'post')
 * @param contentId - ID du contenu
 * @param userId - ID de l'utilisateur qui partage
 * @returns URL de partage ou null
 */
export async function shareContentOnApi(
  contentType: 'idea' | 'post',
  contentId: string,
  userId: string
): Promise<string | null> {
  await simulateApiDelay(100);
  
  console.log('üîÑ [API] G√©n√©ration lien de partage:', contentType, contentId, 'par:', userId);
  
  // V√©rifier que le contenu existe
  let contentExists = false;
  if (contentType === 'idea') {
    contentExists = await getIdeaById(contentId) !== null;
  } else if (contentType === 'post') {
    contentExists = await getPostById(contentId) !== null;
  }
  
  if (!contentExists) {
    console.log('‚ùå [API] Contenu non trouv√© pour partage:', contentType, contentId);
    return null;
  }
  
  // G√©n√©rer une URL de partage
  const baseUrl = typeof window !== 'undefined' ? window.location.origin : 'https://ideosphere.fr';
  const shareUrl = `${baseUrl}/shared/${contentType}/${contentId}?ref=${userId}`;
  
  console.log('‚úÖ [API] Lien de partage g√©n√©r√©:', shareUrl);
  return shareUrl;
}

/**
 * Suivre/ne plus suivre un utilisateur
 * @param targetUserId - ID de l'utilisateur √† suivre
 * @param currentUserId - ID de l'utilisateur actuel
 * @returns true si succ√®s, false sinon
 */
export async function toggleUserFollowOnApi(
  targetUserId: string,
  currentUserId: string
): Promise<boolean> {
  await simulateApiDelay(120);
  
  console.log('üîÑ [API] Toggle suivi utilisateur:', targetUserId, 'par:', currentUserId);
  
  if (targetUserId === currentUserId) {
    console.log('‚ùå [API] Impossible de se suivre soi-m√™me');
    return false;
  }
  
  // V√©rifier que les utilisateurs existent
  const [targetUser, currentUser] = await Promise.all([
    getUserById(targetUserId),
    getUserById(currentUserId)
  ]);
  
  if (!targetUser || !currentUser) {
    console.log('‚ùå [API] Utilisateur non trouv√©');
    return false;
  }
  
  console.log('‚úÖ [API] Toggle suivi r√©ussi pour:', targetUser.name);
  // Dans un vrai syst√®me, on mettrait √† jour les relations utilisateur
  return true;
}

/**
 * Basculer le like d'une r√©ponse √† un post
 * @param postId - ID du post
 * @param replyId - ID de la r√©ponse
 * @param userId - ID de l'utilisateur
 * @returns true si succ√®s, false sinon
 */
export async function togglePostReplyLikeOnApi(
  postId: string,
  replyId: string,
  userId: string
): Promise<boolean> {
  await simulateApiDelay(100);
  
  console.log('üîÑ [API] Toggle like r√©ponse:', replyId, 'par:', userId);
  
  // V√©rifier que le post et l'utilisateur existent
  const [post, user] = await Promise.all([
    getPostById(postId),
    getUserById(userId)
  ]);
  
  if (!post) {
    console.log('‚ùå [API] Post non trouv√©:', postId);
    return false;
  }
  
  if (!user) {
    console.log('‚ùå [API] Utilisateur non trouv√©:', userId);
    return false;
  }
  
  // V√©rifier que la r√©ponse existe
  const reply = post.replies.find(r => r.id === replyId);
  if (!reply) {
    console.log('‚ùå [API] R√©ponse non trouv√©e:', replyId);
    return false;
  }
  
  console.log('‚úÖ [API] Toggle like r√©ponse r√©ussi');
  // Dans un vrai syst√®me, on mettrait √† jour la BD ici
  return true;
}

/**
 * Ajouter une r√©ponse √† un post
 * @param postId - ID du post
 * @param userId - ID de l'utilisateur
 * @param content - Contenu de la r√©ponse
 * @returns Objet PostReply complet ou null si erreur
 */
export async function addPostReplyOnApi(
  postId: string,
  userId: string,
  content: string
): Promise<import('../types').PostReply | null> {
  await simulateApiDelay(150);
  
  console.log('üîÑ [API] Ajout r√©ponse au post:', postId, 'par:', userId);
  
  if (!content || content.trim().length === 0) {
    console.log('‚ùå [API] Contenu de r√©ponse vide');
    return null;
  }
  
  // V√©rifier que le post et l'utilisateur existent
  const [post, user] = await Promise.all([
    getPostById(postId),
    getUserById(userId)
  ]);
  
  if (!post) {
    console.log('‚ùå [API] Post non trouv√©:', postId);
    return null;
  }
  
  if (!user) {
    console.log('‚ùå [API] Utilisateur non trouv√©:', userId);
    return null;
  }
  
  // Cr√©er l'objet PostReply complet
  const newReply: import('../types').PostReply = {
    id: `reply-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    author: user,
    content: content.trim(),
    createdAt: new Date(),
    likes: [],
    likeCount: 0
  };
  
  console.log('‚úÖ [API] R√©ponse ajout√©e avec ID:', newReply.id);
  // Dans un vrai syst√®me, on ajouterait la r√©ponse en BD
  return newReply;
}

/**
 * Upvoter un topic de discussion
 * @param topicId - ID du topic
 * @param userId - ID de l'utilisateur
 * @returns true si succ√®s, false sinon
 */
export async function upvoteDiscussionTopicOnApi(
  topicId: string,
  userId: string
): Promise<boolean> {
  await simulateApiDelay(100);
  
  console.log('üîÑ [API] Upvote topic de discussion:', topicId, 'par:', userId);
  
  // V√©rifier que l'utilisateur existe
  const user = await getUserById(userId);
  if (!user) {
    console.log('‚ùå [API] Utilisateur non trouv√©:', userId);
    return false;
  }
  
  console.log('‚úÖ [API] Upvote topic de discussion r√©ussi');
  // Dans un vrai syst√®me, on mettrait √† jour la BD ici
  return true;
}

/**
 * Upvoter un post de discussion
 * @param topicId - ID du topic
 * @param postId - ID du post
 * @param userId - ID de l'utilisateur
 * @returns true si succ√®s, false sinon
 */
export async function upvoteDiscussionPostOnApi(
  topicId: string,
  postId: string,
  userId: string
): Promise<boolean> {
  await simulateApiDelay(100);
  
  console.log('üîÑ [API] Upvote post de discussion:', postId, 'dans topic:', topicId, 'par:', userId);
  
  // V√©rifier que l'utilisateur existe
  const user = await getUserById(userId);
  if (!user) {
    console.log('‚ùå [API] Utilisateur non trouv√©:', userId);
    return false;
  }
  
  console.log('‚úÖ [API] Upvote post de discussion r√©ussi');
  // Dans un vrai syst√®me, on mettrait √† jour la BD ici
  return true;
}

/**
 * Cr√©er un nouveau topic de discussion
 * @param ideaId - ID de l'id√©e
 * @param userId - ID de l'utilisateur
 * @param data - Donn√©es du topic (title, content, type)
 * @returns ID du nouveau topic ou null si erreur
 */
export async function createDiscussionTopicOnApi(
  ideaId: string,
  userId: string,
  data: {
    title: string;
    content: string;
    type: 'general' | 'question' | 'suggestion' | 'technical';
  }
): Promise<string | null> {
  await simulateApiDelay(200);
  
  console.log('üîÑ [API] Cr√©ation topic de discussion pour id√©e:', ideaId, 'par:', userId);
  
  if (!data.title || data.title.trim().length === 0) {
    console.log('‚ùå [API] Titre du topic vide');
    return null;
  }
  
  if (!data.content || data.content.trim().length === 0) {
    console.log('‚ùå [API] Contenu du topic vide');
    return null;
  }
  
  // V√©rifier que l'id√©e et l'utilisateur existent
  const [idea, user] = await Promise.all([
    getIdeaById(ideaId),
    getUserById(userId)
  ]);
  
  if (!idea) {
    console.log('‚ùå [API] Id√©e non trouv√©e:', ideaId);
    return null;
  }
  
  if (!user) {
    console.log('‚ùå [API] Utilisateur non trouv√©:', userId);
    return null;
  }
  
  // G√©n√©rer un ID pour le nouveau topic
  const topicId = `dt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  
  console.log('‚úÖ [API] Topic de discussion cr√©√© avec ID:', topicId);
  // Dans un vrai syst√®me, on ajouterait le topic en BD
  return topicId;
}

/**
 * Cr√©er un post dans un topic de discussion
 * @param topicId - ID du topic
 * @param userId - ID de l'utilisateur
 * @param content - Contenu du post
 * @returns ID du nouveau post ou null si erreur
 */
export async function createDiscussionPostOnApi(
  topicId: string,
  userId: string,
  content: string
): Promise<string | null> {
  await simulateApiDelay(150);
  
  console.log('üîÑ [API] Cr√©ation post de discussion dans topic:', topicId, 'par:', userId);
  
  if (!content || content.trim().length === 0) {
    console.log('‚ùå [API] Contenu du post vide');
    return null;
  }
  
  // V√©rifier que l'utilisateur existe
  const user = await getUserById(userId);
  if (!user) {
    console.log('‚ùå [API] Utilisateur non trouv√©:', userId);
    return null;
  }
  
  // G√©n√©rer un ID pour le nouveau post
  const postId = `dp-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  
  console.log('‚úÖ [API] Post de discussion cr√©√© avec ID:', postId);
  // Dans un vrai syst√®me, on ajouterait le post en BD
  return postId;
}

/**
 * Marquer un post de discussion comme r√©ponse accept√©e
 * @param topicId - ID du topic
 * @param postId - ID du post
 * @param userId - ID de l'utilisateur (doit √™tre le cr√©ateur de l'id√©e ou du topic)
 * @returns true si succ√®s, false sinon
 */
export async function markDiscussionPostAsAnswerOnApi(
  topicId: string,
  postId: string,
  userId: string
): Promise<boolean> {
  await simulateApiDelay(120);
  
  console.log('üîÑ [API] Marquer post comme r√©ponse:', postId, 'dans topic:', topicId, 'par:', userId);
  
  // V√©rifier que l'utilisateur existe
  const user = await getUserById(userId);
  if (!user) {
    console.log('‚ùå [API] Utilisateur non trouv√©:', userId);
    return false;
  }
  
  console.log('‚úÖ [API] Post marqu√© comme r√©ponse accept√©e');
  // Dans un vrai syst√®me, on mettrait √† jour la BD ici
  return true;
}